# -*- coding: utf-8 -*-
"""Copy of Numpy_tasks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K0ya-8pq_IG6V3LUOTlj-pNbfTubA-Sp

# Numpy

#### 1. Import the numpy package under the name `np` (★☆☆) 
(**hint**: import … as …)
"""

import numpy as np

"""#### 2. Print the numpy version and the configuration (★☆☆) 
(**hint**: np.\_\_version\_\_, np.show\_config)
"""

print(np.__version__)

np.__config__.show()

"""#### 3. Create a null vector of size 10 (★☆☆) 
(**hint**: np.zeros)
"""

Z = np.zeros(10)
print(Z)

"""#### 4.  How to find the memory size of any array (★☆☆) 
(**hint**: size, itemsize)
"""

Z.size

Z.itemsize

"""#### 5.  How to get the documentation of the numpy add function from the command line? (★☆☆) 
(**hint**: np.info)
"""

np.info(np.add)

"""#### 6.  Create a null vector of size 10 but the fifth value which is 1 (★☆☆) 
(**hint**: array\[4\])
"""

y=np.zeros(10)
y[4]=5
print(y)

"""#### 7.  Create a vector with values ranging from 10 to 49 (★☆☆) 
(**hint**: np.arange)
"""

y=np.arange(10,50)
print(y)

"""#### 8.  Reverse a vector (first element becomes last) (★☆☆) 
(**hint**: array\[::-1\])
"""

x = np.arange(10,50)
x= x[::-1]
print (x)

"""#### 9.  Create a 3x3 matrix with values ranging from 0 to 8 (★☆☆) 
(**hint**: reshape)
"""

x=np.arange(0,9).reshape(3,3)

"""#### 10. Find indices of non-zero elements from \[1,2,0,0,4,0\] (★☆☆) 
(**hint**: np.nonzero)
"""

t=np.nonzero([1,2,0,0,4,0])
print(t)

"""#### 11. Create a 3x3 identity matrix (★☆☆) 
(**hint**: np.eye)
"""

x=np.eye(3,3)
print(x)

"""#### 12. Create a 3x3x3 array with random values (★☆☆) 
(**hint**: np.random.random)
"""

Z = np.random.uniform((3,3,3))
print (Z)

"""#### 13. Create a 10x10 array with random values and find the minimum and maximum values (★☆☆) 
(**hint**: min, max)
"""

Z = np.random.random((10,10))
Zmin, Zmax = Z.min(), Z.max()
print(Zmin, Zmax)

"""#### 14. Create a random vector of size 30 and find the mean value (★☆☆) 
(**hint**: mean)
"""

y = np.random.random(10)
x = y.mean()
print (x)

"""#### 15. Create a 2d array with 1 on the border and 0 inside (★☆☆) 
(**hint**: array\[1:-1, 1:-1\])
"""

y = np.ones((10,10))
y[1:-1,1:-1]=0
print(y)

"""#### 16. How to add a border (filled with 0's) around an existing array? (★☆☆) 
(**hint**: np.pad)
"""



"""#### 17. What is the result of the following expression? (★☆☆) 
(**hint**: NaN = not a number, inf = infinity)

```python
0 * np.nan
np.nan == np.nan
np.inf > np.nan
np.nan - np.nan
0.3 == 3 * 0.1
```
"""

print(0 * np.nan)
print(np.nan == np.nan)
print(np.inf > np.nan)
print(np.nan - np.nan)
print(0.3 == 3 * 0.1)

"""#### 18. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal (★☆☆) 
(**hint**: np.diag)
"""

y = np.diag(1+np.arange(4), k = -1)
print (y)

"""#### 19. Create a 8x8 matrix and fill it with a checkerboard pattern (★☆☆) 
(**hint**: array\[::2\])
"""

x = np.zeros ((8,8), dtype=int)
x[1::2, ::2]= 1
x[::2, 1::2] = 1
print (x)

"""#### 20. Consider a (6,7,8) shape array, what is the index (x,y,z) of the 100th element? 
(**hint**: np.unravel_index)
"""



"""#### 21. Create a checkerboard 8x8 matrix using the tile function (★☆☆) 
(**hint**: np.tile)
"""

array= np.array([[0,1], [1,0]])
Z = np.tile(array,(4,4))
print (Z)

"""#### 22. Normalize a 5x5 random matrix (★☆☆) 
(**hint**: (x - min) / (max - min))
"""

x = np.random.random((5,5))
xmax, xmin = x.max(), x.min()
x= (x-xmin)/(xmax-xmin)
print (x)

"""#### 23. Create a custom dtype that describes a color as four unsigned bytes (RGBA) (★☆☆) 
(**hint**: np.dtype)
"""



"""#### 24. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product) (★☆☆) 
(**hint**: np.dot | @)
"""

y= np.dot(np.ones((5,3)), np.ones((3,2)))
print (y)

"""#### 25. Given a 1D array, negate all elements which are between 3 and 8, in place. (★☆☆) 
(**hint**: >, <=)
"""



"""#### 26. What is the output of the following script? (★☆☆) 
(**hint**: np.sum)

```python
# Author: Jake VanderPlas

print(sum(range(5),-1))
from numpy import *
print(sum(range(5),-1))
```
"""

print(sum(range(5),-1))
from numpy import *
print(sum(range(5),-1))

"""#### 27. Consider an integer vector Z, which of these expressions are legal? (★☆☆)

```python
Z**Z
2 << Z >> 2
Z <- Z
1j*Z
Z/1/1
Z<Z>Z
```
"""



"""#### 28. What are the result of the following expressions?

```python
np.array(0) / np.array(0)
np.array(0) // np.array(0)
np.array([np.nan]).astype(int).astype(float)
```
"""

print(np.array(0) / np.array(0))
print(np.array(0) // np.array(0))
print(np.array([np.nan]).astype(int).astype(float))

"""#### 29. How to round away from zero a float array ? (★☆☆) 
(**hint**: np.uniform, np.copysign, np.ceil, np.abs)
"""



"""#### 30. How to find common values between two arrays? (★☆☆) 
(**hint**: np.intersect1d)
"""



"""#### 31. How to ignore all numpy warnings (not recommended)? (★☆☆) 
(**hint**: np.seterr, np.errstate)
"""



"""#### 32. Is the following expressions true? (★☆☆) 
(**hint**: imaginary number)

```python
np.sqrt(-1) == np.emath.sqrt(-1)
```
"""

np.sqrt(-1) == np.emath.sqrt(-1)

"""#### 33. How to get the dates of yesterday, today and tomorrow? (★☆☆) 
(**hint**: np.datetime64, np.timedelta64)
"""



"""#### 34. How to get all the dates corresponding to the month of July 2016? (★★☆) 
(**hint**: np.arange(dtype=datetime64\['D'\]))
"""



"""#### 35. How to compute ((A+B)\*(-A/2)) in place (without copy)? (★★☆) 
(**hint**: np.add(out=), np.negative(out=), np.multiply(out=), np.divide(out=))
"""



"""#### 36. Extract the integer part of a random array using 5 different methods (★★☆) 
(**hint**: %, np.floor, np.ceil, astype, np.trunc)
"""



"""#### 37. Create a 5x5 matrix with row values ranging from 0 to 4 (★★☆) 
(**hint**: np.arange)
"""

y = np.zeros((5,5))
y += np.arange(5)
print(y)

"""#### 38. Consider a generator function that generates 10 integers and use it to build an array (★☆☆) 
(**hint**: np.fromiter)
"""

def generate(): 
    for x in range(10):
        yield x
        
Z = np.fromiter(generate(), dtype=float, count=-1)
print (Z)

"""#### 39. Create a vector of size 10 with values ranging from 0 to 1, both excluded (★★☆) 
(**hint**: np.linspace)
"""



"""#### 40. Create a random vector of size 10 and sort it (★★☆) 
(**hint**: sort)
"""

Z = np.random.random(10)
Z.sort()
print(Z)

"""#### 41. How to sum a small array faster than np.sum? (★★☆) 
(**hint**: np.add.reduce)
"""



"""#### 42. Consider two random array A and B, check if they are equal (★★☆) 
(**hint**: np.allclose, np.array\_equal)
"""

A = np.random.randint(0,2,5)
B = np.random.randint(0,2,5)
equal = np.allclose(A,B)
print(equal)

"""#### 43. Make an array immutable (read-only) (★★☆) 
(**hint**: flags.writeable)
"""



"""#### 44. Consider a random 10x2 matrix representing cartesian coordinates, convert them to polar coordinates (★★☆) 
(**hint**: np.sqrt, np.arctan2)
"""



"""#### 45. Create random vector of size 10 and replace the maximum value by 0 (★★☆) 
(**hint**: argmax)
"""



"""#### 46. Create a structured array with `x` and `y` coordinates covering the \[0,1\]x\[0,1\] area (★★☆) 
(**hint**: np.meshgrid)
"""



"""####  47. Given two arrays, X and Y, construct the Cauchy matrix C (Cij =1/(xi - yj)) 
(**hint**: np.subtract.outer)
"""



"""#### 48. Print the minimum and maximum representable value for each numpy scalar type (★★☆) 
(**hint**: np.iinfo, np.finfo, eps)
"""



"""#### 49. How to print all the values of an array? (★★☆) 
(**hint**: np.set\_printoptions)

#### 50. How to find the closest value (to a given scalar) in a vector? (★★☆) 
(**hint**: argmin)
"""



"""#### 51. Create a structured array representing a position (x,y) and a color (r,g,b) (★★☆) 
(**hint**: dtype)
"""

Y = np.zeros(10, [ ('position', [ ('x', float, 1),
                                   ('y', float, 1)]),
                    ('color',    [ ('r', float, 1),
                                   ('g', float, 1),
                                   ('b', float, 1)])])
print(Y)

"""#### 52. Consider a random vector with shape (100,2) representing coordinates, find point by point distances (★★☆) 
(**hint**: np.atleast\_2d, T, np.sqrt)
"""



"""#### 53. How to convert a float (32 bits) array into an integer (32 bits) in place? 
(**hint**: astype(copy=False))
"""

Z = np.arange(10, dtype=np.int32)
Z = Z.astype(np.float32, copy=False)

"""#### 54. How to read the following file? (★★☆) 
(**hint**: np.genfromtxt)

```
1, 2, 3, 4, 5
6,  ,  , 7, 8
 ,  , 9,10,11
```
"""



"""#### 55. What is the equivalent of enumerate for numpy arrays? (★★☆) 
(**hint**: np.ndenumerate, np.ndindex)
"""



"""#### 56. Generate a generic 2D Gaussian-like array (★★☆) 
(**hint**: np.meshgrid, np.exp)
"""



"""#### 57. How to randomly place p elements in a 2D array? (★★☆) 
(**hint**: np.put, np.random.choice)
"""



"""#### 58. Subtract the mean of each row of a matrix (★★☆) 
(**hint**: mean(axis=,keepdims=))
"""



"""#### 59. How to sort an array by the nth column? (★★☆) 
(**hint**: argsort)
"""



"""#### 60. How to tell if a given 2D array has null columns? (★★☆) 
(**hint**: any, ~)
"""



"""#### 61. Find the nearest value from a given value in an array (★★☆) 
(**hint**: np.abs, argmin, flat)
"""



"""#### 62. Considering two arrays with shape (1,3) and (3,1), how to compute their sum using an iterator? (★★☆) 
(**hint**: np.nditer)
"""



"""#### 63. Create an array class that has a name attribute (★★☆) 
(**hint**: class method)
"""



"""#### 64. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★) 
(**hint**: np.bincount | np.add.at)
"""



"""#### 65. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★) 
(**hint**: np.bincount)
"""



"""#### 66. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★) 
(**hint**: np.unique)
"""



"""#### 67. Considering a four dimensions array, how to get sum over the last two axis at once? (★★★) 
(**hint**: sum(axis=(-2,-1)))
"""



"""#### 68. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset  indices? (★★★) 
(**hint**: np.bincount)
"""



"""#### 69. How to get the diagonal of a dot product? (★★★) 
(**hint**: np.diag)
"""

A = np.random.randint(0,10,(3,3))
B= np.random.randint(0,10,(3,3))


np.diag(np.dot(A, B))

"""#### 70. Consider the vector \[1, 2, 3, 4, 5\], how to build a new vector with 3 consecutive zeros interleaved between each value? (★★★) 
(**hint**: array\[::4\])
"""



"""#### 71. Consider an array of dimension (5,5,3), how to mulitply it by an array with dimensions (5,5)? (★★★) 
(**hint**: array\[:, :, None\])
"""

A = np.ones((5,5,3))
B = 2*np.ones((5,5))
print(A * B[:,:,None])

"""#### 72. How to swap two rows of an array? (★★★) 
(**hint**: array\[\[\]\] = array\[\[\]\])
"""

A = np.arange(25).reshape(5,5)
A[[0,1]] = A[[1,0]]
print(A)

"""#### 73. Consider a set of 10 triplets describing 10 triangles (with shared vertices), find the set of unique line segments composing all the  triangles (★★★) 
(**hint**: repeat, np.roll, np.sort, view, np.unique)
"""



"""#### 74. Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C? (★★★) 
(**hint**: np.repeat)
"""



"""#### 75. How to compute averages using a sliding window over an array? (★★★) 
(**hint**: np.cumsum)
"""



"""#### 76. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z\[0\],Z\[1\],Z\[2\]) and each subsequent row is  shifted by 1 (last row should be (Z\[-3\],Z\[-2\],Z\[-1\]) (★★★) 
(**hint**: from numpy.lib import stride_tricks)
"""



"""#### 77. How to negate a boolean, or to change the sign of a float inplace? (★★★) 
(**hint**: np.logical_not, np.negative)
"""



"""#### 78. Consider 2 sets of points P0,P1 describing lines (2d) and a point p, how to compute distance from p to each line i  (P0\[i\],P1\[i\])? (★★★)"""



"""#### 79. Consider 2 sets of points P0,P1 describing lines (2d) and a set of points P, how to compute distance from each point j (P\[j\]) to each line i (P0\[i\],P1\[i\])? (★★★)"""



"""#### 80. Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a `fill` value when necessary) (★★★) 
(**hint**: minimum, maximum)
"""



"""#### 81. Consider an array Z = \[1,2,3,4,5,6,7,8,9,10,11,12,13,14\], how to generate an array R = \[\[1,2,3,4\], \[2,3,4,5\], \[3,4,5,6\], ..., \[11,12,13,14\]\]? (★★★) 
(**hint**: stride\_tricks.as\_strided)
"""



"""#### 82. Compute a matrix rank (★★★) 
(**hint**: np.linalg.svd) (suggestion: np.linalg.svd)
"""



"""#### 83. How to find the most frequent value in an array? 
(**hint**: np.bincount, argmax)
"""



"""#### 84. Extract all the contiguous 3x3 blocks from a random 10x10 matrix (★★★) 
(**hint**: stride\_tricks.as\_strided)
"""

import numpy as np
z=np.random.randit(0,6,(10,10))
print("initial array:")
print(z)
n=3
i = 1+(z.shape([0]-3)
k = 1+(z.shape([1]-3)
value = np.lib.stride_tricks.as_strided(z, shape=(i, k, n, n), strides = z.strides + z.strides)
print("contigous blocks \n")
print(value)

"""#### 85. Create a 2D array subclass such that Z\[i,j\] == Z\[j,i\] (★★★) 
(**hint**: class method)
"""

class Symetric(np.ndarray):
    def __setitem__(self, (i,j), value):
        super(Symetric, self).__setitem__((i,j), value)
        super(Symetric, self).__setitem__((j,i), value)

def symetric(Z):
    return np.asarray(Z + Z.T - np.diag(Z.diagonal())).view(Symetric)

S = symetric(np.random.randint(0,10,(5,5)))
S[2,3] = 42
print(S)

"""#### 86. Consider a set of p matrices wich shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of of the p matrix products at once? (result has shape (n,1)) (★★★) 
(**hint**: np.tensordot)
"""



"""#### 87. Consider a 16x16 array, how to get the block-sum (block size is 4x4)? (★★★) 
(**hint**: np.add.reduceat)
"""

M = np.ones((16,16))
k = 4
S = np.add.reduceat(np.add.reduceat(M, np.arange(0, M.shape[0], k), axis=0),
                                       np.arange(0, M.shape[1], k), axis=1)
print ('input array')
print (M)
print ('block sum')
print (S)

"""#### 88. How to implement the Game of Life using numpy arrays? (★★★)"""



"""#### 89. How to get the n largest values of an array (★★★) 
(**hint**: np.argsort | np.argpartition)
"""

Z = np.arange(10000)
np.random.shuffle(Z)
n = 5

# Slow Ascending
print (Z[np.argsort(Z)[-n:]])

# Fast random
print (Z[np.argpartition(-Z,n)[:n]])

"""#### 90. Given an arbitrary number of vectors, build the cartesian product (every combinations of every item) (★★★) 
(**hint**: np.indices)
"""



"""#### 91. How to create a record array from a regular array? (★★★) 
(**hint**: np.core.records.fromarrays)
"""



"""#### 92. Consider a large vector Z, compute Z to the power of 3 using 3 different methods (★★★) 
(**hint**: np.power, \*, np.einsum)
"""



"""#### 93. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B? (★★★) 
(**hint**: np.where)
"""



"""#### 94. Considering a 10x3 matrix, extract rows with unequal values (e.g. \[2,2,3\]) (★★★)"""



"""#### 95. Convert a vector of ints into a matrix binary representation (★★★) 
(**hint**: np.unpackbits)
"""



J = np.array([0, 1, 2, 3, 15, 16, 32, 64, 128], dtype=np.uint8)
print(np.unpackbits(J[:, np.newaxis], axis=1))

"""#### 96. Given a two dimensional array, how to extract unique rows? (★★★) 
(**hint**: np.ascontiguousarray)
"""



"""#### 97. Considering 2 vectors A & B, write the einsum equivalent of inner, outer, sum, and mul function (★★★) 
(**hint**: np.einsum)
"""



"""#### 98. Considering a path described by two vectors (X,Y), how to sample it using equidistant samples (★★★)? 
(**hint**: np.cumsum, np.interp)
"""



"""#### 99. Given an integer n and a 2D array X, select from X the rows which can be interpreted as draws from a multinomial distribution with n degrees, i.e., the rows which only contain integers and which sum to n. (★★★) 
(**hint**: np.logical\_and.reduce, np.mod)
"""



"""#### 100. Compute bootstrapped 95% confidence intervals for the mean of a 1D array X (i.e., resample the elements of an array with replacement N times, compute the mean of each sample, and then compute percentiles over the means). (★★★) 
(**hint**: np.percentile)
"""

